-------------------------------------------------------------------------------

1. Instructions

- replace any [...] with free text,
  and
- replace the [?] with an X if you have completed that stage,
- replace the [?] with an * if you have attempted that stage, but you know
  it doesn't work completely; document why you think it doesn't work, plus
  what you would do to fix the problem, at the end of the marksheet.

-------------------------------------------------------------------------------

2. Information

So that we can calibrate and improve the assignment in the future, give us
a rough idea how long (in hours) you spent on it *in total*:

effort : [50] hours

-------------------------------------------------------------------------------

3. Citation

Clearly it might have an influence on your mark, but the use of third-party
resources *is* allowed *if* correctly cited (unless explicitly prohibited 
by the assignment description of course).  Let us know what third-party 
source code or resources you used (if any) so it's clear what's your work 
and what isn't:

[...]

-------------------------------------------------------------------------------

4. Marking

The following gives a stage-by-stage description of the assignment marking
scheme.  Note this acts as an indicative guideline only, including weights
for each more obvious aspect (e.g., functional correctness); other aspects
outside this list can warrant an increase/decrease in marks, with examples
including hard to quantify features such as the efficiency, robustness, 
generality, realism, or style of a solution.

[X] Stage 1 : an attack based on error messages
              - correct target material                              ( 40%)
              - solution quality wrt. efficiency, robustness etc.    ( 30%)
              - analysis questions                                   ( 30%)

              target material : [3B59810A343DE29932989164CCD7A469997EE7EE90060C53]

[X] Stage 2 : an attack based on execution time
              - correct target material                              ( 40%)
              - solution quality wrt. efficiency, robustness etc.    ( 30%)
              - analysis questions                                   ( 30%)

              target material : [3509CAA17214066D]

[X] Stage 3 : an attack based on an injected fault
              - correct target material                              ( 40%)
              - solution quality wrt. efficiency, robustness etc.    ( 30%)
              - analysis questions                                   ( 30%)

              target material : [AAB3C151A6DA5CC216E55568253DF015]

[*] Stage 4 : an attack based on power consumption
              - correct target material                              ( 40%)
              - solution quality wrt. efficiency, robustness etc.    ( 30%)
              - analysis questions                                   ( 30%)

              target material : [...]

                                                                     ------
                                                                     (400%)

-------------------------------------------------------------------------------

5. Documentation

Any other documentation, notes or comments that you think are important or
might be easy to overlook (e.g., a subtle issue or technique in associated
source code) should go here:

[
 I have implemented both attacks in C++.

 The fault attack follows the paper by Tunstall et al. and works by computing the
 set of equations for the values of delta and then using the key hypotheses obtained
 together with the f equations in order to derive key guesses which are then verified
 with an encryption procedure only if they pass these 2 constraints. I have also
 parallelised the main loop over the possibilities returned from the delta equations
 in order to speed up the calculations.

 The Power attack works only partially. If we consider the key k = k1||k2 I think I have
 managed to recover the k2 part of the key as this remains constant even after running the
 attack with more samples. The way my attack works is it first uses a set of random 128 bit
 sector numbers (which can be more than the limit and thus allow us to recover all bits of the second key)
 and the first part of the power traces corresponding to these to recover the
 second key which is used to compute the tweak T in the encryption standard.
 Afterwards, I take a set random sector numbers less than the limit imposed by the device,
 I compute the tweak which is T = AES-ENC(K2, randSect) and xor this with the message corresponding
 to the decryption done with this sector as parameter. Then I attempt to perform a DPA attack
 on the decryption phase of the oracle query by attacking the INV-SubBytes operation.
 I think my attack fails because
]

-------------------------------------------------------------------------------
